// Code generated by jtd-codegen for TypeScript v0.2.1

export type Module = ModuleApi | ModuleComponent | ModuleServiceProvider;

export interface ModuleApi {
  moduleType: "API";
  name: string;
  version: string;
  dataTypes?: DataType[];
  dependencies?: { [key: string]: string };
  interfaces?: Interface[];
}

export interface ModuleComponent {
  moduleType: "COMPONENT";
  name: string;
  version: string;
  dependencies?: { [key: string]: string };
  serviceReferences?: ServiceReference[];
}

export interface ModuleServiceProvider {
  moduleType: "SERVICE_PROVIDER";
  dependencies: { [key: string]: string };
  name: string;
  service: Service;
  version: string;
  serviceReferences?: ServiceReference[];
}

/**
 * A function argument
 */
export interface Argument {
  /**
   * The argument's name
   */
  name: string;

  /**
   * The argument's data type
   */
  type: ArgumentType;
}

/**
 * The type of a function argument
 */
export interface ArgumentType {
  /**
   * A built in data type, i.e. one that is part of the node standard library,
   * like 'string', 'number[]' etc.
   */
  builtin?: string;

  /**
   * Use a predefined data type, either from this module or another one, as
   * opposed to a built in data type
   */
  import?: DataTypeRef;
}

/**
 * The definition of a data type
 */
export interface DataType {
  /**
   * The data type's name
   */
  name: string;

  /**
   * A JSON Type Definition describing the data type's structure
   */
  struct: any;
}

/**
 * A reference to a data type defined somewhere else
 */
export interface DataTypeRef {
  /**
   * The referenced data type's name
   */
  name: string;

  /**
   * The module in which the referenced data type is defined. This can be
   * omitted when used inside the module that defines the referenced data type.
   */
  module?: string;
}

/**
 * A function exposed by a service that can be invoked via RPC
 */
export interface Function {
  /**
   * The function's name
   */
  name: string;

  /**
   * Arguments that can be passed to this function. May be omitted if the
   * function takes no arguments
   */
  arguments?: Argument[];

  /**
   * The function's return type. An object of this type will be published on the
   * function's response topic once the function completes
   */
  returnType?: ArgumentType;
}

/**
 * An interface, resembling a set of functions that make up a service's
 * capabilities
 */
export interface Interface {
  /**
   * The functions provided by services implementing this interface
   */
  functions: Function[];

  /**
   * The interface's name
   */
  name: string;
}

/**
 * A reference to an interface defined somewhere else
 */
export interface InterfaceRef {
  /**
   * The module in which the referenced interface is defined
   */
  module: string;

  /**
   * The referenced interface's name
   */
  name: string;
}

/**
 * A reference to a module defined somewhere else
 */
export interface ModuleRef {
  /**
   * The referenced module's name
   */
  name: string;

  /**
   * The referenced module's version
   */
  version: string;
}

export interface Service {
  interfaces: InterfaceRef[];
  name: string;
  properties?: { [key: string]: string };
}

export enum ServiceReferenceCardinality {
  AtLeastOne = "AT_LEAST_ONE",
  Mandatory = "MANDATORY",
  Multiple = "MULTIPLE",
  Optional = "OPTIONAL",
}

export enum ServiceReferencePolicy {
  Dynamic = "DYNAMIC",
  Static = "STATIC",
}

export interface ServiceReference {
  /**
   * The module in which the referenced service interface is defined.
   */
  module: string;

  /**
   * The the name of the referenced service interface.
   */
  name: string;
  cardinality?: ServiceReferenceCardinality;
  policy?: ServiceReferencePolicy;
  properties?: { [key: string]: string }[];
}
